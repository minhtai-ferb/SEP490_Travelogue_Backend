// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travelogue.Repository.Data;

#nullable disable

namespace Travelogue.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Travelogue.Repository.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("booking_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("char(36)")
                        .HasColumnName("report_id");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("char(36)")
                        .HasColumnName("review_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<Guid?>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ReportId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TourId");

                    b.ToTable("announcements");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bank_name");

                    b.Property<string>("BankOwnerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bank_owner_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("bank_accounts");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("BookingDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("booking_date");

                    b.Property<int>("BookingType")
                        .HasColumnType("int")
                        .HasColumnName("booking_type");

                    b.Property<DateTimeOffset?>("CancelledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("cancelled_at");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("contact_address");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("discount_amount");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("final_price");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("original_price");

                    b.Property<string>("PaymentLinkId")
                        .HasColumnType("longtext")
                        .HasColumnName("payment_link_id");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("promotion_id");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid?>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.Property<Guid?>("TourScheduleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_schedule_id");

                    b.Property<Guid?>("TripPlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.Property<Guid?>("WorkshopScheduleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_schedule_id");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TourId");

                    b.HasIndex("TourScheduleId");

                    b.HasIndex("TripPlanId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkshopId");

                    b.HasIndex("WorkshopScheduleId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.BookingParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("booking_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<decimal>("PricePerParticipant")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price_per_participant");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("booking_participant");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.BookingPriceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("longtext")
                        .HasColumnName("rejection_reason");

                    b.Property<DateTimeOffset?>("ReviewedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("reviewed_by");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideId");

                    b.ToTable("booking_price_request");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.BookingWithdrawal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("booking_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("WithdrawalRequestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("withdrawal_request_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("WithdrawalRequestId");

                    b.ToTable("booking_withdrawals");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Certification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("certificate_url");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<Guid>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideId");

                    b.ToTable("certifications");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CommissionRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("effective_date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<decimal>("RateValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("rate_value");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("commission_rates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("556efefa-cda2-4214-a399-9095ed419bea"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 8, 31, 3, 59, 11, 432, DateTimeKind.Unspecified).AddTicks(5274), new TimeSpan(0, 0, 0, 0, 0)),
                            EffectiveDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 8, 31, 3, 59, 11, 432, DateTimeKind.Unspecified).AddTicks(5281), new TimeSpan(0, 0, 0, 0, 0)),
                            RateValue = 5m,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("3ab54eb2-cb40-4329-866e-a568cfe6b554"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 8, 31, 3, 59, 11, 432, DateTimeKind.Unspecified).AddTicks(5289), new TimeSpan(0, 0, 0, 0, 0)),
                            EffectiveDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 8, 31, 3, 59, 11, 432, DateTimeKind.Unspecified).AddTicks(5290), new TimeSpan(0, 0, 0, 0, 0)),
                            RateValue = 3m,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CommissionSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("CraftVillageCommissionRate")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("craft_village_commission_rate");

                    b.Property<DateTime>("CraftVillageEffectiveDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("craft_village_effective_date");

                    b.Property<DateTime?>("CraftVillageEndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("craft_village_end_date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<decimal>("TourGuideCommissionRate")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("tour_guide_commission_rate");

                    b.Property<DateTime>("TourGuideEffectiveDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("tour_guide_effective_date");

                    b.Property<DateTime?>("TourGuideEndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("tour_guide_end_date");

                    b.HasKey("Id");

                    b.ToTable("commission_settings");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRecognizedByUnesco")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_recognized_by_unesco");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("owner_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<string>("SignatureProduct")
                        .HasColumnType("longtext")
                        .HasColumnName("signature_product");

                    b.Property<string>("Website")
                        .HasColumnType("longtext")
                        .HasColumnName("website");

                    b.Property<bool>("WorkshopsAvailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("workshops_available");

                    b.Property<int?>("YearsOfHistory")
                        .HasColumnType("int")
                        .HasColumnName("years_of_history");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("craft_villages");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillageRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<TimeSpan?>("CloseTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("close_time");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRecognizedByUnesco")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_recognized_by_unesco");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Medias")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("medias");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<TimeSpan?>("OpenTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("open_time");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("owner_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("longtext")
                        .HasColumnName("rejection_reason");

                    b.Property<DateTimeOffset?>("ReviewedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reviewed_at");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("reviewed_by");

                    b.Property<string>("SignatureProduct")
                        .HasColumnType("longtext")
                        .HasColumnName("signature_product");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Website")
                        .HasColumnType("longtext")
                        .HasColumnName("website");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.Property<bool>("WorkshopsAvailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("workshops_available");

                    b.Property<int?>("YearsOfHistory")
                        .HasColumnType("int")
                        .HasColumnName("years_of_history");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("craft_village_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Cuisine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CookingMethod")
                        .HasColumnType("longtext")
                        .HasColumnName("cooking_method");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("CuisineType")
                        .HasColumnType("longtext")
                        .HasColumnName("cuisine_type");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<string>("SignatureProduct")
                        .HasColumnType("longtext")
                        .HasColumnName("signature_product");

                    b.Property<string>("Website")
                        .HasColumnType("longtext")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("cuisines");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<float?>("Area")
                        .HasColumnType("float")
                        .HasColumnName("area");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.DistrictMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("district_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.FavoriteLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("favorite_locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.HistoricalLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("established_date");

                    b.Property<int>("HeritageRank")
                        .HasColumnType("int")
                        .HasColumnName("heritage_rank");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<int?>("TypeHistoricalLocation")
                        .HasColumnType("int")
                        .HasColumnName("type_historical_location");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("historical_locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<TimeSpan?>("CloseTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("close_time");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<int>("LocationType")
                        .HasColumnType("int")
                        .HasColumnName("location_type");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<double>("MaxPrice")
                        .HasColumnType("double")
                        .HasColumnName("max_price");

                    b.Property<double>("MinPrice")
                        .HasColumnType("double")
                        .HasColumnName("min_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<TimeSpan?>("OpenTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("open_time");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<int>("Interest")
                        .HasColumnType("int")
                        .HasColumnName("interest");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("location_interests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("location_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("char(36)")
                        .HasColumnName("receiver_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sent_at");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_highlighted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<int?>("NewsCategory")
                        .HasColumnType("int")
                        .HasColumnName("news_category");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<int?>("TypeExperience")
                        .HasColumnType("int")
                        .HasColumnName("type_experience");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("news");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.NewsMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("char(36)")
                        .HasColumnName("news_id");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("news_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiry_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_used");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Token")
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("password_reset_tokens");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("ApplicableType")
                        .HasColumnType("int")
                        .HasColumnName("applicable_type");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int")
                        .HasColumnName("discount_type");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("discount_value");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("PromotionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("promotion_code");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("promotion_name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PromotionCode")
                        .IsUnique();

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("promotions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.PromotionApplicable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("GuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("guide_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("promotion_id");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int")
                        .HasColumnName("service_type");

                    b.Property<Guid?>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("TourId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("promotion_applicable");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RefundRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("booking_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("refund_amount");

                    b.Property<DateTimeOffset>("RequestedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("requested_at");

                    b.Property<DateTimeOffset?>("RespondedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("responded_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("refund_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RejectionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("booking_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("ModeratorComment")
                        .HasColumnType("longtext")
                        .HasColumnName("moderator_comment");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<int>("RequestType")
                        .HasColumnType("int")
                        .HasColumnName("request_type");

                    b.Property<DateTimeOffset?>("ReviewedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("reviewed_by");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.Property<Guid?>("TourScheduleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_schedule_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TourScheduleId");

                    b.ToTable("rejection_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("char(36)")
                        .HasColumnName("review_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("booking_id");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<int?>("FinalReportStatus")
                        .HasColumnType("int")
                        .HasColumnName("final_report_status");

                    b.Property<DateTimeOffset?>("HandledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("handled_at");

                    b.Property<Guid?>("HandledBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("handled_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("ModeratorNote")
                        .HasColumnType("longtext")
                        .HasColumnName("moderator_note");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<Guid?>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.SystemSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Key")
                        .HasColumnType("int")
                        .HasColumnName("key");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Unit")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("unit");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("system_settings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7e580e5-8942-436f-b1b7-8fc8f5b788ea"),
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 8, 31, 10, 59, 11, 432, DateTimeKind.Unspecified).AddTicks(4823), new TimeSpan(0, 7, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Key = 1,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 8, 31, 10, 59, 11, 432, DateTimeKind.Unspecified).AddTicks(4879), new TimeSpan(0, 7, 0, 0, 0)),
                            Unit = "%",
                            Value = "10"
                        });
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsTourWorkshop")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_tour_workshop");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("PickupAddress")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("pickup_address");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("StayInfo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("stay_info");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int")
                        .HasColumnName("total_days");

                    b.Property<int?>("TourType")
                        .HasColumnType("int")
                        .HasColumnName("tour_type");

                    b.Property<string>("TransportType")
                        .HasColumnType("longtext")
                        .HasColumnName("transport_type");

                    b.HasKey("Id");

                    b.ToTable("tours");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Introduction")
                        .HasColumnType("longtext")
                        .HasColumnName("introduction");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LanguageCodes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("language_codes");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int")
                        .HasColumnName("max_participants");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("TagCodes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tag_codes");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tour_guides");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("introduction");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("longtext")
                        .HasColumnName("rejection_reason");

                    b.Property<DateTimeOffset?>("ReviewedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("reviewed_by");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tour_guide_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideRequestCertification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("certificate_url");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<Guid>("TourGuideRequestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_request_id");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideRequestId");

                    b.ToTable("tour_guide_request_certifications");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("booking_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<Guid>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.Property<Guid?>("TourScheduleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_schedule_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TourScheduleId");

                    b.ToTable("tour_guide_schedules");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<int>("Interest")
                        .HasColumnType("int")
                        .HasColumnName("interest");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("tour_interests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("tour_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int")
                        .HasColumnName("activity_type");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<int>("DayOrder")
                        .HasColumnType("int")
                        .HasColumnName("day_order");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<float>("DistanceFromPrev")
                        .HasColumnType("float")
                        .HasColumnName("distance_from_prev");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<float>("EstimatedEndTime")
                        .HasColumnType("float")
                        .HasColumnName("estimated_end_time");

                    b.Property<float>("EstimatedStartTime")
                        .HasColumnType("float")
                        .HasColumnName("estimated_start_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.Property<float>("TravelTimeFromPrev")
                        .HasColumnType("float")
                        .HasColumnName("travel_time_from_prev");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TourId");

                    b.ToTable("tour_plan_locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanLocationWorkshop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<TimeSpan?>("PlannedEndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("planned_end_time");

                    b.Property<TimeSpan?>("PlannedStartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("planned_start_time");

                    b.Property<Guid>("TourPlanLocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_plan_location_id");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.Property<Guid?>("WorkshopSessionRuleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_session_rule_id");

                    b.Property<Guid?>("WorkshopTicketTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_ticket_type_id");

                    b.HasKey("Id");

                    b.HasIndex("TourPlanLocationId")
                        .IsUnique();

                    b.HasIndex("WorkshopId");

                    b.HasIndex("WorkshopSessionRuleId");

                    b.HasIndex("WorkshopTicketTypeId");

                    b.ToTable("tour_plan_location_workshops");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("AdultPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("adult_price");

                    b.Property<decimal>("ChildrenPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("children_price");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<int>("CurrentBooked")
                        .HasColumnType("int")
                        .HasColumnName("current_booked");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("departure_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<int>("MaxParticipant")
                        .HasColumnType("int")
                        .HasColumnName("max_participant");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("tour_schedules");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourScheduleWorkshop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("TourPlanLocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_plan_location_id");

                    b.Property<Guid>("TourScheduleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_schedule_id");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.Property<Guid>("WorkshopScheduleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_schedule_id");

                    b.Property<Guid?>("WorkshopTicketTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_ticket_type_id");

                    b.HasKey("Id");

                    b.HasIndex("TourPlanLocationId");

                    b.HasIndex("TourScheduleId");

                    b.HasIndex("WorkshopId");

                    b.HasIndex("WorkshopScheduleId");

                    b.HasIndex("WorkshopTicketTypeId");

                    b.ToTable("tour_schedule_workshops");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TransactionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("account_number");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("booking_id");

                    b.Property<string>("CounterAccountBankId")
                        .HasColumnType("longtext")
                        .HasColumnName("counter_account_bank_id");

                    b.Property<string>("CounterAccountName")
                        .HasColumnType("longtext")
                        .HasColumnName("counter_account_name");

                    b.Property<string>("CounterAccountNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("counter_account_number");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext")
                        .HasColumnName("currency");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Method")
                        .HasColumnType("longtext")
                        .HasColumnName("method");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("paid_amount");

                    b.Property<string>("PaymentLinkId")
                        .HasColumnType("longtext")
                        .HasColumnName("payment_link_id");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("longtext")
                        .HasColumnName("payment_reference");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int")
                        .HasColumnName("payment_status");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TransactionDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("transaction_date_time");

                    b.Property<int>("TransactionDirection")
                        .HasColumnType("int")
                        .HasColumnName("transaction_direction");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("char(36)")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PickupAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("pickup_address");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("trip_plans");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<float?>("DistanceFromPrev")
                        .HasColumnType("float")
                        .HasColumnName("distance_from_prev");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_time");

                    b.Property<float?>("EstimatedEndTime")
                        .HasColumnType("float")
                        .HasColumnName("estimated_end_time");

                    b.Property<float?>("EstimatedStartTime")
                        .HasColumnType("float")
                        .HasColumnName("estimated_start_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_time");

                    b.Property<float?>("TravelTimeFromPrev")
                        .HasColumnType("float")
                        .HasColumnName("travel_time_from_prev");

                    b.Property<Guid>("TripPlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TripPlanId");

                    b.ToTable("trip_plan_locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar_url");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("EmailCode")
                        .HasColumnType("longtext")
                        .HasColumnName("email_code");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("full_name");

                    b.Property<string>("GoogleId")
                        .HasColumnType("longtext")
                        .HasColumnName("google_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_email_verified");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("VARBINARY(64)")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("VARBINARY(128)")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool?>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("ResetToken")
                        .HasColumnType("longtext")
                        .HasColumnName("reset_token");

                    b.Property<DateTimeOffset?>("ResetTokenExpires")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reset_token_expires");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("sex");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("longtext")
                        .HasColumnName("verification_token");

                    b.Property<DateTimeOffset?>("VerificationTokenExpires")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("verification_token_expires");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserAnnouncement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("char(36)")
                        .HasColumnName("announcement_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_readed");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("UserId");

                    b.ToTable("user_announcements");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("balance");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("wallets");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WithdrawalRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bank_account_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("ProofImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("proof_image_url");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("request_time");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("char(36)")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("withdrawal_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Workshop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<Guid>("CraftVillageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("craft_village_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CraftVillageId");

                    b.ToTable("workshops");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("activity");

                    b.Property<int>("ActivityOrder")
                        .HasColumnType("int")
                        .HasColumnName("activity_order");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("WorkshopTicketTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_ticket_type_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopTicketTypeId");

                    b.ToTable("workshop_activities");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopActivityRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("activity");

                    b.Property<int>("ActivityOrder")
                        .HasColumnType("int")
                        .HasColumnName("activity_order");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("WorkshopTicketTypeRequestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_ticket_type_request_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopTicketTypeRequestId");

                    b.ToTable("workshop_activity_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("workshop_exceptions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopExceptionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<Guid?>("WorkshopRequestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_request_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopRequestId");

                    b.ToTable("workshop_exception_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("workshop_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopMediaRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.HasKey("Id");

                    b.ToTable("workshop_media_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopRecurringRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("days_of_week");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("workshop_recurring_rules");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopRecurringRuleRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("days_of_week");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("WorkshopRequestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_request_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopRequestId");

                    b.ToTable("workshop_recurring_rule_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<Guid>("CraftVillageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("craft_village_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Medias")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("medias");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("workshop_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<int>("CurrentBooked")
                        .HasColumnType("int")
                        .HasColumnName("current_booked");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("workshop_schedules");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopSessionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.Property<Guid?>("WorkshopRecurringRuleRequestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_recurring_rule_request_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopRecurringRuleRequestId");

                    b.ToTable("workshop_session_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopSessionRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("RecurringRuleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("recurring_rule_id");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("RecurringRuleId");

                    b.ToTable("workshop_session_rules");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopTicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCombo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_combo");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("workshop_ticket_types");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopTicketTypeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCombo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_combo");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<Guid?>("WorkshopRequestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workshop_request_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopRequestId");

                    b.ToTable("workshop_ticket_type_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Announcement", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("Travelogue.Repository.Entities.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId");

                    b.HasOne("Travelogue.Repository.Entities.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId");

                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany()
                        .HasForeignKey("TourGuideId");

                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId");

                    b.Navigation("Booking");

                    b.Navigation("Report");

                    b.Navigation("Review");

                    b.Navigation("Tour");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.BankAccount", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Booking", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId");

                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany("Bookings")
                        .HasForeignKey("TourGuideId");

                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany("Bookings")
                        .HasForeignKey("TourId");

                    b.HasOne("Travelogue.Repository.Entities.TourSchedule", "TourSchedule")
                        .WithMany("Bookings")
                        .HasForeignKey("TourScheduleId");

                    b.HasOne("Travelogue.Repository.Entities.TripPlan", "TripPlan")
                        .WithMany("Bookings")
                        .HasForeignKey("TripPlanId");

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Workshop", "Workshop")
                        .WithMany("Bookings")
                        .HasForeignKey("WorkshopId");

                    b.HasOne("Travelogue.Repository.Entities.WorkshopSchedule", "WorkshopSchedule")
                        .WithMany()
                        .HasForeignKey("WorkshopScheduleId");

                    b.Navigation("Promotion");

                    b.Navigation("Tour");

                    b.Navigation("TourGuide");

                    b.Navigation("TourSchedule");

                    b.Navigation("TripPlan");

                    b.Navigation("User");

                    b.Navigation("Workshop");

                    b.Navigation("WorkshopSchedule");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.BookingParticipant", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Booking", "Booking")
                        .WithMany("Participants")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.BookingPriceRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany("BookingPriceRequests")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.BookingWithdrawal", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.WithdrawalRequest", "WithdrawalRequest")
                        .WithMany()
                        .HasForeignKey("WithdrawalRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("WithdrawalRequest");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Certification", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany("Certifications")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillage", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithOne("CraftVillage")
                        .HasForeignKey("Travelogue.Repository.Entities.CraftVillage", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillageRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.WorkshopRequest", "Workshop")
                        .WithMany()
                        .HasForeignKey("WorkshopId");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Cuisine", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithOne("Cuisine")
                        .HasForeignKey("Travelogue.Repository.Entities.Cuisine", "LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.DistrictMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.FavoriteLocation", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("FavoriteLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("FavoriteLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.HistoricalLocation", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithOne("HistoricalLocation")
                        .HasForeignKey("Travelogue.Repository.Entities.HistoricalLocation", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Location", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany("Locations")
                        .HasForeignKey("DistrictId");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationInterest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("LocationInterests")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("LocationMedias")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Message", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.News", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.NewsMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.News", "News")
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Promotion", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.PromotionApplicable", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany("PromotionApplicables")
                        .HasForeignKey("GuideId");

                    b.HasOne("Travelogue.Repository.Entities.Promotion", "Promotion")
                        .WithMany("PromotionApplicables")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany("PromotionApplicables")
                        .HasForeignKey("TourId");

                    b.HasOne("Travelogue.Repository.Entities.Workshop", "Workshop")
                        .WithMany("PromotionApplicables")
                        .HasForeignKey("WorkshopId");

                    b.Navigation("Promotion");

                    b.Navigation("Tour");

                    b.Navigation("TourGuide");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RefundRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RejectionRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany()
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TourSchedule", "TourSchedule")
                        .WithMany()
                        .HasForeignKey("TourScheduleId");

                    b.Navigation("Booking");

                    b.Navigation("TourGuide");

                    b.Navigation("TourSchedule");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Report", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Review", "Review")
                        .WithMany("Reports")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Review", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany()
                        .HasForeignKey("TourGuideId");

                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId");

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Workshop", "Workshop")
                        .WithMany()
                        .HasForeignKey("WorkshopId");

                    b.Navigation("Booking");

                    b.Navigation("Tour");

                    b.Navigation("TourGuide");

                    b.Navigation("User");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuide", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("TourGuides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideRequestCertification", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourGuideRequest", "TourGuideRequest")
                        .WithMany("Certifications")
                        .HasForeignKey("TourGuideRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuideRequest");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideSchedule", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany("TourGuideSchedules")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TourSchedule", "TourSchedule")
                        .WithMany("TourGuideSchedules")
                        .HasForeignKey("TourScheduleId");

                    b.Navigation("Booking");

                    b.Navigation("TourGuide");

                    b.Navigation("TourSchedule");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourInterest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany("TourInterests")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanLocation", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany("TourPlanLocations")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanLocationWorkshop", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourPlanLocation", "TourPlanLocation")
                        .WithOne("WorkshopDetail")
                        .HasForeignKey("Travelogue.Repository.Entities.TourPlanLocationWorkshop", "TourPlanLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Workshop", "Workshop")
                        .WithMany()
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.WorkshopSessionRule", "WorkshopSessionRule")
                        .WithMany()
                        .HasForeignKey("WorkshopSessionRuleId");

                    b.HasOne("Travelogue.Repository.Entities.WorkshopTicketType", "WorkshopTicketType")
                        .WithMany()
                        .HasForeignKey("WorkshopTicketTypeId");

                    b.Navigation("TourPlanLocation");

                    b.Navigation("Workshop");

                    b.Navigation("WorkshopSessionRule");

                    b.Navigation("WorkshopTicketType");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourSchedule", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany("TourSchedules")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourScheduleWorkshop", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourPlanLocation", "TourPlanLocation")
                        .WithMany()
                        .HasForeignKey("TourPlanLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TourSchedule", "TourSchedule")
                        .WithMany("TourScheduleWorkshops")
                        .HasForeignKey("TourScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Workshop", "Workshop")
                        .WithMany()
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.WorkshopSchedule", "WorkshopSchedule")
                        .WithMany()
                        .HasForeignKey("WorkshopScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.WorkshopTicketType", "WorkshopTicketType")
                        .WithMany()
                        .HasForeignKey("WorkshopTicketTypeId");

                    b.Navigation("TourPlanLocation");

                    b.Navigation("TourSchedule");

                    b.Navigation("Workshop");

                    b.Navigation("WorkshopSchedule");

                    b.Navigation("WorkshopTicketType");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TransactionEntry", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Booking", null)
                        .WithMany("Transactions")
                        .HasForeignKey("BookingId");

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Travelogue.Repository.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlan", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("TripPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanLocation", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("TripPlanLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TripPlan", "TripPlan")
                        .WithMany("TripPlanLocations")
                        .HasForeignKey("TripPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("TripPlan");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserAnnouncement", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Announcement", "Notification")
                        .WithMany("UserAnnouncements")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("UserAnnouncements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserRole", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Wallet", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Travelogue.Repository.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WithdrawalRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Wallet", "Wallet")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Workshop", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.CraftVillage", "CraftVillage")
                        .WithMany("Workshops")
                        .HasForeignKey("CraftVillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftVillage");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopActivity", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.WorkshopTicketType", "WorkshopTicketType")
                        .WithMany("WorkshopActivities")
                        .HasForeignKey("WorkshopTicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkshopTicketType");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopActivityRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.WorkshopTicketTypeRequest", null)
                        .WithMany("WorkshopActivities")
                        .HasForeignKey("WorkshopTicketTypeRequestId");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopException", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Workshop", "Workshop")
                        .WithMany("Exceptions")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopExceptionRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.WorkshopRequest", null)
                        .WithMany("Exceptions")
                        .HasForeignKey("WorkshopRequestId");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Workshop", "Workshop")
                        .WithMany("Medias")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopRecurringRule", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Workshop", "Workshop")
                        .WithMany("RecurringRules")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopRecurringRuleRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.WorkshopRequest", null)
                        .WithMany("RecurringRules")
                        .HasForeignKey("WorkshopRequestId");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopSchedule", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Workshop", "Workshop")
                        .WithMany("Schedules")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopSessionRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.WorkshopRecurringRuleRequest", null)
                        .WithMany("Sessions")
                        .HasForeignKey("WorkshopRecurringRuleRequestId");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopSessionRule", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.WorkshopRecurringRule", "RecurringRule")
                        .WithMany("Sessions")
                        .HasForeignKey("RecurringRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecurringRule");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopTicketType", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Workshop", "Workshop")
                        .WithMany("TicketTypes")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopTicketTypeRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.WorkshopRequest", null)
                        .WithMany("TicketTypes")
                        .HasForeignKey("WorkshopRequestId");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Announcement", b =>
                {
                    b.Navigation("UserAnnouncements");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Booking", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillage", b =>
                {
                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.District", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Location", b =>
                {
                    b.Navigation("CraftVillage");

                    b.Navigation("Cuisine");

                    b.Navigation("FavoriteLocations");

                    b.Navigation("HistoricalLocation");

                    b.Navigation("LocationInterests");

                    b.Navigation("LocationMedias");

                    b.Navigation("TripPlanLocations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Promotion", b =>
                {
                    b.Navigation("PromotionApplicables");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Review", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Tour", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PromotionApplicables");

                    b.Navigation("TourInterests");

                    b.Navigation("TourPlanLocations");

                    b.Navigation("TourSchedules");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuide", b =>
                {
                    b.Navigation("BookingPriceRequests");

                    b.Navigation("Bookings");

                    b.Navigation("Certifications");

                    b.Navigation("PromotionApplicables");

                    b.Navigation("TourGuideSchedules");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideRequest", b =>
                {
                    b.Navigation("Certifications");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanLocation", b =>
                {
                    b.Navigation("WorkshopDetail");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourSchedule", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TourGuideSchedules");

                    b.Navigation("TourScheduleWorkshops");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlan", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TripPlanLocations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.User", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Bookings");

                    b.Navigation("FavoriteLocations");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("SentMessages");

                    b.Navigation("TourGuides");

                    b.Navigation("TripPlans");

                    b.Navigation("UserAnnouncements");

                    b.Navigation("UserRoles");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("WithdrawalRequests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Workshop", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Exceptions");

                    b.Navigation("Medias");

                    b.Navigation("PromotionApplicables");

                    b.Navigation("RecurringRules");

                    b.Navigation("Schedules");

                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopRecurringRule", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopRecurringRuleRequest", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopRequest", b =>
                {
                    b.Navigation("Exceptions");

                    b.Navigation("RecurringRules");

                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopTicketType", b =>
                {
                    b.Navigation("WorkshopActivities");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WorkshopTicketTypeRequest", b =>
                {
                    b.Navigation("WorkshopActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
