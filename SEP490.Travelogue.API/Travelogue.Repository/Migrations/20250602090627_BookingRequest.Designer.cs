// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travelogue.Repository.Data;

#nullable disable

namespace Travelogue.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250602090627_BookingRequest")]
    partial class BookingRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Travelogue.Repository.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<Guid?>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TourId");

                    b.ToTable("announcements");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<decimal?>("PricePerNight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price_per_night");

                    b.Property<string>("Website")
                        .HasColumnType("longtext")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("craft_villages");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillageInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CraftVillageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("craft_village_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("interest_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.HasKey("Id");

                    b.HasIndex("CraftVillageId");

                    b.HasIndex("InterestId");

                    b.ToTable("craft_village_interests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillageMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CraftVillageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("craft_village_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("CraftVillageId");

                    b.ToTable("craft_village_media");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Cuisine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("CuisineType")
                        .HasColumnType("longtext")
                        .HasColumnName("cuisine_type");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<string>("Website")
                        .HasColumnType("longtext")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("cuisines");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CuisineInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<Guid>("CuisineId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cuisine_id");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("interest_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.HasIndex("InterestId");

                    b.ToTable("cuisine_interests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CuisineMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<Guid>("CuisineId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cuisine_id");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.ToTable("cuisine_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<float?>("Area")
                        .HasColumnType("float")
                        .HasColumnName("area");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("FileKey")
                        .HasColumnType("longtext")
                        .HasColumnName("file_key");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.DistrictMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("district_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_highlighted");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_recurring");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("LunarEndDate")
                        .HasColumnType("longtext")
                        .HasColumnName("lunar_end_date");

                    b.Property<string>("LunarStartDate")
                        .HasColumnType("longtext")
                        .HasColumnName("lunar_start_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("RecurrencePattern")
                        .HasColumnType("longtext")
                        .HasColumnName("recurrence_pattern");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TypeEventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("type_event_id");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TypeEventId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.EventMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("event_id");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("event_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<Guid?>("TypeExperienceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("type_experience_id");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TypeExperienceId");

                    b.ToTable("experiences");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.ExperienceMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("experience_id");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.ToTable("experience_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.FavoriteLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("favorite_locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<decimal?>("PricePerNight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price_per_night");

                    b.Property<string>("Website")
                        .HasColumnType("longtext")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("hotels");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.HotelMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)")
                        .HasColumnName("hotel_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("hotel_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Interest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("interests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<int>("HeritageRank")
                        .HasColumnType("int")
                        .HasColumnName("heritage_rank");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("TypeLocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("type_location_id");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("TypeLocationId");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationCraftVillageSuggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CraftVillageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("craft_village_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.HasIndex("CraftVillageId");

                    b.HasIndex("LocationId");

                    b.ToTable("location_craft_village_suggestions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationCuisineSuggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<Guid>("CuisineId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cuisine_id");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.HasIndex("LocationId");

                    b.ToTable("location_cuisine_suggestions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationHotelSuggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)")
                        .HasColumnName("hotel_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("LocationId");

                    b.ToTable("location_hotel_suggestions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("interest_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.HasKey("Id");

                    b.HasIndex("InterestId");

                    b.HasIndex("LocationId");

                    b.ToTable("location_interests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("location_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("char(36)")
                        .HasColumnName("receiver_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sent_at");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_highlighted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("NewsCategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("news_category_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.HasIndex("NewsCategoryId");

                    b.ToTable("news");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.NewsCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("category");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.HasKey("Id");

                    b.ToTable("news_categories");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.NewsMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("char(36)")
                        .HasColumnName("news_id");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("news_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("cancelled_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsOpenToJoin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_open_to_join");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("order_date");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("scheduled_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_paid");

                    b.Property<Guid?>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.Property<Guid?>("TripPlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_id");

                    b.Property<Guid?>("TripPlanVersionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_version_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("VersionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("version_id");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TourId");

                    b.HasIndex("TripPlanId");

                    b.HasIndex("TripPlanVersionId");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.OrderWithdrawal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id");

                    b.Property<Guid>("WithdrawalRequestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("withdrawal_request_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("WithdrawalRequestId");

                    b.ToTable("order_withdrawals");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiry_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_used");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Token")
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("password_reset_tokens");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RefundRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approved_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("refund_amount");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("request_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("refund_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reported_at");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("char(36)")
                        .HasColumnName("review_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RoleDistrict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_districts");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.SystemSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("key");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("system_settings");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<Guid>("TourTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_type_id");

                    b.HasKey("Id");

                    b.HasIndex("TourTypeId");

                    b.ToTable("tours");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("tour_groups");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("join_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id");

                    b.Property<Guid>("TourGroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_group_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TourGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("tour_group_members");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Introduction")
                        .HasColumnType("longtext")
                        .HasColumnName("introduction");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tour_guides");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<Guid>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideId");

                    b.ToTable("tour_guide_availabilities");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideBookingRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("requested_at");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("TourGuideId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_guide_id");

                    b.Property<Guid>("TripPlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_id");

                    b.Property<Guid>("TripPlanVersionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_version_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("UserRespondedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("user_responded_at");

                    b.Property<string>("UserResponseMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("user_response_message");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TripPlanId");

                    b.HasIndex("TripPlanVersionId");

                    b.HasIndex("UserId");

                    b.ToTable("tour_guide_booking_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("interest_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.HasKey("Id");

                    b.HasIndex("InterestId");

                    b.HasIndex("TourId");

                    b.ToTable("tour_interests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourJoinRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("FromOrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("from_order_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("RequestNote")
                        .HasColumnType("longtext")
                        .HasColumnName("request_note");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("requested_at");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("responded_at");

                    b.Property<string>("ResponseNote")
                        .HasColumnType("longtext")
                        .HasColumnName("response_note");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<Guid>("ToOrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("to_order_id");

                    b.HasKey("Id");

                    b.HasIndex("FromOrderId");

                    b.HasIndex("ToOrderId");

                    b.ToTable("tour_join_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("tour_plans");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanCraftVillage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CraftVillageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("craft_village_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TourPlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_plan_id");

                    b.HasKey("Id");

                    b.HasIndex("CraftVillageId");

                    b.HasIndex("TourPlanId");

                    b.ToTable("tour_plan_craft_villages");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanCuisine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<Guid>("CuisineId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cuisine_id");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TourPlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_plan_id");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.HasIndex("TourPlanId");

                    b.ToTable("tour_plan_cuisines");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TourPlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_plan_id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TourPlanId");

                    b.ToTable("tour_plan_locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tour_types");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("transaction_date");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<Guid?>("TripPlanVersionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_version_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("trip_plans");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanCraftVillage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CraftVillageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("craft_village_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TripPlanVersionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_version_id");

                    b.HasKey("Id");

                    b.HasIndex("CraftVillageId");

                    b.HasIndex("TripPlanVersionId");

                    b.ToTable("trip_plan_craft_villages");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanCuisine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<Guid>("CuisineId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cuisine_id");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TripPlanVersionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_version_id");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.HasIndex("TripPlanVersionId");

                    b.ToTable("trip_plan_cuisines");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TripPlanVersionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_version_id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TripPlanVersionId");

                    b.ToTable("trip_plan_locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<int>("Permission")
                        .HasColumnType("int")
                        .HasColumnName("permission");

                    b.Property<Guid>("TripPlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TripPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("trip_plan_shares");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<Guid>("TripPlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trip_plan_id");

                    b.Property<DateTimeOffset>("VersionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("version_date");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int")
                        .HasColumnName("version_number");

                    b.HasKey("Id");

                    b.HasIndex("TripPlanId");

                    b.ToTable("trip_plan_versions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type_name");

                    b.HasKey("Id");

                    b.ToTable("type_events");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type_name");

                    b.HasKey("Id");

                    b.ToTable("type_experiences");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("type_location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("EmailCode")
                        .HasColumnType("longtext")
                        .HasColumnName("email_code");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("full_name");

                    b.Property<string>("GoogleId")
                        .HasColumnType("longtext")
                        .HasColumnName("google_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_email_verified");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool?>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("ResetToken")
                        .HasColumnType("longtext")
                        .HasColumnName("reset_token");

                    b.Property<DateTimeOffset?>("ResetTokenExpires")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reset_token_expires");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("sex");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("longtext")
                        .HasColumnName("verification_token");

                    b.Property<DateTimeOffset?>("VerificationTokenExpires")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("verification_token_expires");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserAnnouncement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("char(36)")
                        .HasColumnName("announcement_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_readed");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("UserId");

                    b.ToTable("user_announcements");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("char(36)")
                        .HasColumnName("interest_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("InterestId");

                    b.HasIndex("UserId");

                    b.ToTable("user_interests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discount_amount");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_used");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tour_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("vouchers");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WithdrawalRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("CraftVillageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("craft_village_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("processed_at");

                    b.Property<Guid?>("ProcessedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("processed_by");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("request_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CraftVillageId");

                    b.HasIndex("UserId");

                    b.ToTable("withdrawal_requests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Announcement", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany()
                        .HasForeignKey("TourGuideId");

                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId");

                    b.Navigation("Tour");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillageInterest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.CraftVillage", "CraftVillage")
                        .WithMany()
                        .HasForeignKey("CraftVillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Interest", "Interest")
                        .WithMany("CraftVillageInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftVillage");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillageMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.CraftVillage", "CraftVillage")
                        .WithMany()
                        .HasForeignKey("CraftVillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftVillage");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CuisineInterest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Cuisine", "Cuisine")
                        .WithMany()
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Interest", "Interest")
                        .WithMany("CuisineInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CuisineMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Cuisine", "Cuisine")
                        .WithMany()
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisine");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.DistrictMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Event", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany("Events")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("Activities")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Travelogue.Repository.Entities.TypeEvent", "TypeEvent")
                        .WithMany("Events")
                        .HasForeignKey("TypeEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Location");

                    b.Navigation("TypeEvent");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.EventMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Event", "Event")
                        .WithMany("EventMedias")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Experience", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany("Experiences")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Travelogue.Repository.Entities.Event", "Event")
                        .WithMany("Experiences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("Experiences")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Travelogue.Repository.Entities.TypeExperience", "TypeExperience")
                        .WithMany("Experiences")
                        .HasForeignKey("TypeExperienceId");

                    b.Navigation("District");

                    b.Navigation("Event");

                    b.Navigation("Location");

                    b.Navigation("TypeExperience");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.ExperienceMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Experience", "Experience")
                        .WithMany("ExperienceMedias")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.FavoriteLocation", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("FavoriteLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("FavoriteLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.HotelMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Location", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany("Locations")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Travelogue.Repository.Entities.TypeLocation", "TypeLocation")
                        .WithMany("Locations")
                        .HasForeignKey("TypeLocationId");

                    b.Navigation("District");

                    b.Navigation("TypeLocation");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationCraftVillageSuggestion", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.CraftVillage", "CraftVillage")
                        .WithMany("LocationCraftVillageSuggestions")
                        .HasForeignKey("CraftVillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("LocationCraftVillageSuggestions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftVillage");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationCuisineSuggestion", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Cuisine", "Cuisine")
                        .WithMany("LocationCuisineSuggestions")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("LocationCuisineSuggestions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationHotelSuggestion", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Hotel", "Hotel")
                        .WithMany("LocationHotelSuggestions")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationInterest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Interest", "Interest")
                        .WithMany("LocationInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("LocationInterests")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("LocationMedias")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Message", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.News", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Travelogue.Repository.Entities.NewsCategory", "NewsCategory")
                        .WithMany("News")
                        .HasForeignKey("NewsCategoryId");

                    b.Navigation("Event");

                    b.Navigation("Location");

                    b.Navigation("NewsCategory");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.NewsMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.News", "News")
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Order", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany()
                        .HasForeignKey("TourGuideId");

                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany("Orders")
                        .HasForeignKey("TourId");

                    b.HasOne("Travelogue.Repository.Entities.TripPlan", "TripPlan")
                        .WithMany("Orders")
                        .HasForeignKey("TripPlanId");

                    b.HasOne("Travelogue.Repository.Entities.TripPlanVersion", "TripPlanVersion")
                        .WithMany()
                        .HasForeignKey("TripPlanVersionId");

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("TourGuide");

                    b.Navigation("TripPlan");

                    b.Navigation("TripPlanVersion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.OrderWithdrawal", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.WithdrawalRequest", "WithdrawalRequest")
                        .WithMany()
                        .HasForeignKey("WithdrawalRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("WithdrawalRequest");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RefundRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Report", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Review", "Review")
                        .WithMany("Reports")
                        .HasForeignKey("ReviewId");

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Review", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany("Reviews")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RoleDistrict", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany("RoleDistricts")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Role", "Role")
                        .WithMany("RoleDistricts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Tour", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourType", "TourType")
                        .WithMany("Tours")
                        .HasForeignKey("TourTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourType");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGroup", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany("TourGroups")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGroupMember", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TourGroup", "TourGroups")
                        .WithMany("TourGroupMembers")
                        .HasForeignKey("TourGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("TourGroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("TourGroups");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuide", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("TourGuides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideAvailability", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany("Availabilities")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuideBookingRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TourGuide", "TourGuide")
                        .WithMany()
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TripPlan", "TripPlan")
                        .WithMany()
                        .HasForeignKey("TripPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TripPlanVersion", "TripPlanVersion")
                        .WithMany()
                        .HasForeignKey("TripPlanVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");

                    b.Navigation("TripPlan");

                    b.Navigation("TripPlanVersion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourInterest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Interest", "Interest")
                        .WithMany("TourInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourJoinRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Order", "FromOrder")
                        .WithMany()
                        .HasForeignKey("FromOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Order", "ToOrder")
                        .WithMany()
                        .HasForeignKey("ToOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromOrder");

                    b.Navigation("ToOrder");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlan", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", null)
                        .WithMany("TourPlans")
                        .HasForeignKey("LocationId");

                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany("TourPlans")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanCraftVillage", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.CraftVillage", "CraftVillage")
                        .WithMany()
                        .HasForeignKey("CraftVillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TourPlan", "TourPlan")
                        .WithMany("TourPlanCraftVillages")
                        .HasForeignKey("TourPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftVillage");

                    b.Navigation("TourPlan");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanCuisine", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Cuisine", "Cuisine")
                        .WithMany()
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TourPlan", "TourPlan")
                        .WithMany("TourPlanCuisines")
                        .HasForeignKey("TourPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("TourPlan");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlanLocation", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TourPlan", "TourPlan")
                        .WithMany("TourPlanLocations")
                        .HasForeignKey("TourPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("TourPlan");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Transaction", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlan", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("TripPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanCraftVillage", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.CraftVillage", "CraftVillage")
                        .WithMany("TripPlanCraftVillages")
                        .HasForeignKey("CraftVillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TripPlanVersion", "TripPlanVersion")
                        .WithMany("TripPlanCraftVillages")
                        .HasForeignKey("TripPlanVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftVillage");

                    b.Navigation("TripPlanVersion");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanCuisine", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Cuisine", "Cuisine")
                        .WithMany("TripPlanCuisines")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TripPlanVersion", "TripPlanVersion")
                        .WithMany("TripPlanCuisines")
                        .HasForeignKey("TripPlanVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("TripPlanVersion");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanLocation", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("TripPlanLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.TripPlanVersion", "TripPlanVersion")
                        .WithMany("TripPlanLocations")
                        .HasForeignKey("TripPlanVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("TripPlanVersion");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanShare", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TripPlan", "TripPlan")
                        .WithMany("Shares")
                        .HasForeignKey("TripPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TripPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanVersion", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.TripPlan", "TripPlan")
                        .WithMany("TripPlanVersions")
                        .HasForeignKey("TripPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TripPlan");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserAnnouncement", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Announcement", "Announcement")
                        .WithMany("UserAnnouncements")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("UserAnnouncements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserInterest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Interest", "Interest")
                        .WithMany("UserInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("UserInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserRole", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Voucher", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.WithdrawalRequest", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.CraftVillage", "CraftVillage")
                        .WithMany()
                        .HasForeignKey("CraftVillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftVillage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Announcement", b =>
                {
                    b.Navigation("UserAnnouncements");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.CraftVillage", b =>
                {
                    b.Navigation("LocationCraftVillageSuggestions");

                    b.Navigation("TripPlanCraftVillages");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Cuisine", b =>
                {
                    b.Navigation("LocationCuisineSuggestions");

                    b.Navigation("TripPlanCuisines");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.District", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Experiences");

                    b.Navigation("Locations");

                    b.Navigation("RoleDistricts");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Event", b =>
                {
                    b.Navigation("EventMedias");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Experience", b =>
                {
                    b.Navigation("ExperienceMedias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Hotel", b =>
                {
                    b.Navigation("LocationHotelSuggestions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Interest", b =>
                {
                    b.Navigation("CraftVillageInterests");

                    b.Navigation("CuisineInterests");

                    b.Navigation("LocationInterests");

                    b.Navigation("TourInterests");

                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Location", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Experiences");

                    b.Navigation("FavoriteLocations");

                    b.Navigation("LocationCraftVillageSuggestions");

                    b.Navigation("LocationCuisineSuggestions");

                    b.Navigation("LocationInterests");

                    b.Navigation("LocationMedias");

                    b.Navigation("TourPlans");

                    b.Navigation("TripPlanLocations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.NewsCategory", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Review", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Role", b =>
                {
                    b.Navigation("RoleDistricts");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Tour", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("TourGroups");

                    b.Navigation("TourPlans");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGroup", b =>
                {
                    b.Navigation("TourGroupMembers");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourGuide", b =>
                {
                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourPlan", b =>
                {
                    b.Navigation("TourPlanCraftVillages");

                    b.Navigation("TourPlanCuisines");

                    b.Navigation("TourPlanLocations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TourType", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlan", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shares");

                    b.Navigation("TripPlanVersions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TripPlanVersion", b =>
                {
                    b.Navigation("TripPlanCraftVillages");

                    b.Navigation("TripPlanCuisines");

                    b.Navigation("TripPlanLocations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeEvent", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeExperience", b =>
                {
                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeLocation", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.User", b =>
                {
                    b.Navigation("FavoriteLocations");

                    b.Navigation("Orders");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("SentMessages");

                    b.Navigation("TourGroupMembers");

                    b.Navigation("TourGuides");

                    b.Navigation("TripPlans");

                    b.Navigation("UserAnnouncements");

                    b.Navigation("UserInterests");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
