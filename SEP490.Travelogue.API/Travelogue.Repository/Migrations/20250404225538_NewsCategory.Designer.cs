// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travelogue.Repository.Data;

#nullable disable

namespace Travelogue.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250404225538_NewsCategory")]
    partial class NewsCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Travelogue.Repository.Entities.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<float?>("Area")
                        .HasColumnType("float")
                        .HasColumnName("area");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("FileKey")
                        .HasColumnType("longtext")
                        .HasColumnName("file_key");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.DistrictMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("district_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_highlighted");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_recurring");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("LunarEndDate")
                        .HasColumnType("longtext")
                        .HasColumnName("lunar_end_date");

                    b.Property<string>("LunarStartDate")
                        .HasColumnType("longtext")
                        .HasColumnName("lunar_start_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("RecurrencePattern")
                        .HasColumnType("longtext")
                        .HasColumnName("recurrence_pattern");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TypeEventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("type_event_id");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TypeEventId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.EventMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("event_id");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("event_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<Guid?>("TypeExperienceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("type_experience_id");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TypeExperienceId");

                    b.ToTable("experiences");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.ExperienceMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("experience_id");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.ToTable("experience_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.FavoriteLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("favorite_locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<decimal?>("PricePerNight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price_per_night");

                    b.Property<string>("Website")
                        .HasColumnType("longtext")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("hotels");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.HotelMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)")
                        .HasColumnName("hotel_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("hotel_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<int>("HeritageRank")
                        .HasColumnType("int")
                        .HasColumnName("heritage_rank");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("TypeLocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("type_location_id");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("TypeLocationId");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationHotelSuggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)")
                        .HasColumnName("hotel_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("LocationId");

                    b.ToTable("location_hotel_suggestions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("location_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationRestaurantSuggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("restaurant_id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("location_restaurant_suggestions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("NewsCategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("news_category_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.HasIndex("NewsCategoryId");

                    b.ToTable("news");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.NewsCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("category");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.HasKey("Id");

                    b.ToTable("news_categories");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.NewsMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("char(36)")
                        .HasColumnName("news_id");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("news_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiry_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_used");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Token")
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("password_reset_tokens");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("CuisineType")
                        .HasColumnType("longtext")
                        .HasColumnName("cuisine_type");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<string>("Website")
                        .HasColumnType("longtext")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("restaurants");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RestaurantMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("restaurant_id");

                    b.Property<float>("SizeInBytes")
                        .HasColumnType("float")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("restaurant_medias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RoleDistrict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("char(36)")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_districts");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type_name");

                    b.HasKey("Id");

                    b.ToTable("type_events");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type_name");

                    b.HasKey("Id");

                    b.ToTable("type_experiences");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("type_locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("EmailCode")
                        .HasColumnType("longtext")
                        .HasColumnName("email_code");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("full_name");

                    b.Property<string>("GoogleId")
                        .HasColumnType("longtext")
                        .HasColumnName("google_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_email_verified");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool?>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("ResetToken")
                        .HasColumnType("longtext")
                        .HasColumnName("reset_token");

                    b.Property<DateTimeOffset?>("ResetTokenExpires")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reset_token_expires");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("sex");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("longtext")
                        .HasColumnName("verification_token");

                    b.Property<DateTimeOffset?>("VerificationTokenExpires")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("verification_token_expires");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_updated_time");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.DistrictMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Event", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany("Events")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("Activities")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Travelogue.Repository.Entities.TypeEvent", "TypeEvent")
                        .WithMany("Events")
                        .HasForeignKey("TypeEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Location");

                    b.Navigation("TypeEvent");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.EventMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Event", "Event")
                        .WithMany("EventMedias")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Experience", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany("Experiences")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Travelogue.Repository.Entities.Event", "Event")
                        .WithMany("Experiences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("Experiences")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Travelogue.Repository.Entities.TypeExperience", "TypeExperience")
                        .WithMany("Experiences")
                        .HasForeignKey("TypeExperienceId");

                    b.Navigation("District");

                    b.Navigation("Event");

                    b.Navigation("Location");

                    b.Navigation("TypeExperience");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.ExperienceMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Experience", "Experience")
                        .WithMany("ExperienceMedias")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.FavoriteLocation", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("FavoriteLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("FavoriteLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.HotelMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Location", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany("Locations")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Travelogue.Repository.Entities.TypeLocation", "TypeLocation")
                        .WithMany("Locations")
                        .HasForeignKey("TypeLocationId");

                    b.Navigation("District");

                    b.Navigation("TypeLocation");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationHotelSuggestion", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Hotel", "Hotel")
                        .WithMany("LocationHotelSuggestions")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("LocationHotelSuggestions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany("LocationMedias")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.LocationRestaurantSuggestion", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Restaurant", "Restaurant")
                        .WithMany("LocationRestaurantSuggestions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.News", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("Travelogue.Repository.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Travelogue.Repository.Entities.NewsCategory", "NewsCategory")
                        .WithMany("News")
                        .HasForeignKey("NewsCategoryId");

                    b.Navigation("Event");

                    b.Navigation("Location");

                    b.Navigation("NewsCategory");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.NewsMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.News", "News")
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RestaurantMedia", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.RoleDistrict", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.District", "District")
                        .WithMany("RoleDistricts")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.Role", "Role")
                        .WithMany("RoleDistricts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.UserRole", b =>
                {
                    b.HasOne("Travelogue.Repository.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travelogue.Repository.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.District", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Experiences");

                    b.Navigation("Locations");

                    b.Navigation("RoleDistricts");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Event", b =>
                {
                    b.Navigation("EventMedias");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Experience", b =>
                {
                    b.Navigation("ExperienceMedias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Hotel", b =>
                {
                    b.Navigation("LocationHotelSuggestions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Location", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Experiences");

                    b.Navigation("FavoriteLocations");

                    b.Navigation("LocationHotelSuggestions");

                    b.Navigation("LocationMedias");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.NewsCategory", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Restaurant", b =>
                {
                    b.Navigation("LocationRestaurantSuggestions");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.Role", b =>
                {
                    b.Navigation("RoleDistricts");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeEvent", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeExperience", b =>
                {
                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.TypeLocation", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Travelogue.Repository.Entities.User", b =>
                {
                    b.Navigation("FavoriteLocations");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
